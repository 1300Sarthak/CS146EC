Problem 1:
We have discussed insertion sort as an algorithm. Now that we know how to analyze algorithms AND asymptotic notation, let's revisit Insertion Sort!

You may refer to class slides/ online resources to refresh your memory on the insertion sort algorithm. 

For insertion sort, what is the 

Best Case
Average Case
Worst Case
Time complexity? Show your reasoning and work. 

Problem 2:
Below is the pseudocode to perform matrix multiplication that we discussed in HW3. 

MATRIX_MULTIPLY(A, B): 
  if columns(A) ≠ rows(B): 
    raise ValueError("Matrix multiplication is not defined.") 

  rows_A ← number of rows in A 
  cols_A ← number of columns in A 
  cols_B ← number of columns in B 
  result ← matrix of size rows_A x cols_B filled with zeros 

  for i from 1 to rows_A do: 
    for j from 1 to cols_B do: 
    sum ← 0 
      for k from 1 to cols_A do: 
        sum ← sum + A[i][k] * B[k][j] 
      result[i][j] ← sum return result
For the above pseudocode, what is the 

Best Case
Average Case
Worst Case
Time complexity? Show your reasoning and work. 

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

Problem 1:
Best Case - Already sorted: 
  1, 3, 5: 2 comparisons
  1, 3, 5, 6: 3 comparisons
  1, 3, 5, 6, 8: 4 comparisons 
  1, 3, 5, ... , N: n-1 comparisons 
Therefore: 
- O(n)
- Ω(n)
- Θ(n)
Best case time complexity is O(n), or linear growth

Worst Case - Descending order: 
  10, 8: 1 comparison
  10, 8, 6: 1+2 comparisons
  10, 8, 6, 4: 1+2+3 comparisons
  10, 8, ... , N: 1+2+3+...+ N-1 Comparisons = (N)(N-1)/2 Comparisons 
Therefore:
- O(n^2)
- Ω(n^2)
- Θ(n^2)
Worst case time complexity is O(n^2), or quadratic growth

Average Case - Random order: 
  All possible comparisons divided by total trials: [(N)+(N+1)+(N+2)+...+((N)(N-1)/2)] / N 
  Approximately equal to: 1+2+3+...+(N-1)/2
  Sum should be in the form of: N(N+1)/2, so its highest degree must be 2
Therefore:
- O(n^2)
- Ω(n^2)
- Θ(n^2)
Average case time complexity is O(n^2), or quadratic growth 

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

Problem 2: 
MATRIX_MULTIPLY(A, B):                                             1 time
  if columns(A) ≠ rows(B):                                         1 time
    raise ValueError("Matrix multiplication is not defined.")      1 time

  rows_A ← number of rows in A                                     1 time
  cols_A ← number of columns in A                                  1 time
  cols_B ← number of columns in B                                  1 time
  result ← matrix of size rows_A x cols_B filled with zeros        1 time

  for i from 1 to rows_A do:                                       rows_A + 1 times
    for j from 1 to cols_B do:                                     (rows_A)(cols_B + 1) times
    sum ← 0                                                        (rows_A)(cols_B) times
      for k from 1 to cols_A do:                                   (rows_A)(cols_B)(cols_A + 1) times
        sum ← sum + A[i][k] * B[k][j]                              (rows_A)(cols_B)(cols_A) times
      result[i][j] ← sum return result                             (rows_A)(cols_B) times 
Time complexity: 1 + 1 + 1 + 1 + 1 + 1 + 1 + rows_A + 1 + (rows_A)(cols_B + 1) + (rows_A)(cols_B) + 
(rows_A)(cols_B)(cols_A + 1) + (rows_A)(cols_B)(cols_A) + (rows_A)(cols_B) 
= 8 + rows_A + 4(rows_A)(cols_B) + rows_A + 2(rows_A)(cols_B)(cols_A)  
= O(rows_A * cols_B * cols_A) 

"Best" Case: O(1)
columns(A) =/= rows(B), so it raises an error 

Worst Case: O(rows_A * cols_B * cols_A) 
Valid inputs; the for-loops carry out without issue

Average Case: O(rows_A * cols_B * cols_A) 
Valid inputs; the for-loops carry out without issue
