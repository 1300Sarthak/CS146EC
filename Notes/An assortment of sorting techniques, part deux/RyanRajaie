Heaps are complete binary trees which have some particular properties
Complete binary trees have leaf nodes starting from left going to right, and only last row has empty spots
Heap properties: 
Root >= children (max heap)
Root <= children (min heap)
Max heap: 
Max element at ‘top’ of heap/tree
As long as children are less than parent, doesn’t matter if they’re on left or right (144 and 99 can be children of something like 202 in any order)
Larger elements can even be at a lower level, as long as they are not descendants of a smaller element.
Heap properties hold for subsections of heap (subheaps)
Can represent heaps in array form by storing elements top to bottom left to right
Converting arrays back into heaps:
i’s left child = 2i + 1
i’s right child = 2i+2
i’s parent (i - 2) / 2
Heaps: insertion
Have to preserve complete binary tree condition, so insert new nodes from left to right
When incoming value is greater than parent, we have to move nodes around
Just swap with parent until parent is not greater than it. 
Best = Theta(1), Avg/worst = Theta(log n)
For min heaps, you just change the condition to where root must be less than or equal to chillun
Heaps: deletion
If you delete the top node, it results in two disjoint heaps
Instead, swap the top with a leaf node, then delete the leaf
Now, must swap new top node into correct place by comparing with left and right subchildren (Heapify)
For max heap, swap with larger value till none exist
Worst/average = Theta(log n), but if deleting a leaf node is best case, is Theta(1)
BuildHeap
How to build a heap, given an array of elements? 
Use Heapify on all elements
For a sorted array, applying heapify will be Theta(n log n)
Use clever observation, half the nodes will be leaf nodes
So, start in middle of array, start heapify
Then apply heapify for next n/4 nodes to the left
You will then have an array sorted as a heap [123456] -> [126453]
Worst case improves to Theta(n)
Time complexity: n/2 nodes at height 0, n/4 for height 1, n/8 at 2, etc, so it'll be n/2^h at height h
Heapsort:
Build a heap from elements, then sort it
Take array, build heap from using BuildHeap
Until heap is empty, take top element off and delete it (deleting element will trigger a heap deletion, moving next highest to top)
Time complexity can be figured out by heapsort operations
BuildHeap is O(n)
Delete is O(log n)
So it would be log n n times, so O(n logn)
Heapsort is in place (does not need extra space like mergesort)
It is unstable
Slower than quicksort in practice usually
