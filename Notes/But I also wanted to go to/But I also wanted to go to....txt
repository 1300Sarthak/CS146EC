Lecture 14: But I also wanted to go to...
• We want to find the shortest paths from all vertices

Floyd-Warshall Algorithm
• Pseudocode
	1. for each edge (u, v) do
	2. 	dist[u][v] <- w(u, v) // The weight of the edge (u, v)
	3. for each vertex v do
	4. 	dist[v][v] <- 0
	5. for k from 1 to |V|
	6. 	for i from 1 to |V|
	7. 		for j from 1 to |V|
	8. 			if dist[i][j] > dist[i][k] + dist[k][j] 	// This is the heart of the algorithm
	9. 				dist[i][j] <- dist[i][k] + dist[k][j]

• Best suited for dense graphs
	- Exhaustie search for paths from all nodes!

• Time complexity: θ(V^3)

• Space complexity: O(V^2)


Johnson's Algorithm
• Makes use of Dijkstra's and Bellman Ford algorithms

• Steps
	1. Run Bellman Ford on the graph, doing a transformation to remove negative edges
	2. Run Dijkstra's for every vertex on the resultant graph

• Faster than Floyd-Warshall for sparse graphs