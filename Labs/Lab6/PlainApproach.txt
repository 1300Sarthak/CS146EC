The first major hint to solving this problem is understanding the layout. The courses are metaphors for nodes in a graph, because the existence of "prerequisites" means something must be done in an order. Essentially, the problem wants you to imagine a directed graph. The nodes represent courses, and the edges are the order in which the courses need to be taken to advance to another course. As we learned in class with graphs, topological sorting is best known to be equipped to take on a problem with a DAG, or a directed graph that doesn't cycle (it does not cycle as you only progress to future classes, you do not need to go in reverse and retake a class). 

Now, the problem wants us to be able to tell whether or not, given a set of courses with prerequisites, you can finish them all or not. In terms of graphs, this means, can you access all nodes given the constraints of the edges? This is known as a "completed" graph. Again, we use topological sorting for the efficiency it grants us, O(V+E). This means we can expand this to gigantic graphs in an alternate scenario and compute it fast. 

