We will be solving our last problem (probably) together! Here's the problem statement:

You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

Constraints:

1 <= coins.length <= 12
1 <= coins[i] <= 231 - 1
0 <= amount <= 104
Function definition for Java: 

public int coinChange(int[] coins, int amount) {

 }
Function definition for Python:
def coinChange(self, coins: List[int], amount: int) -> int:
  #Your code here


Announced Test Cases:

Test Case 1:
Input: coins = [1,2,5], amount = 11 
Output: 3 
Explanation: 11 = 5 + 5 + 1
Test Case 2:
Input: coins = [2], amount = 3 
Output: -1

Test Case 3: 
Input: coins = [1], amount = 0 
Output: 0

WHAT TO DO:

1. In the folder called "Labs", create a subfolder called "Lab 8".

2. Solve the above problem statement, using BOTH Java and Python. 

3. Ensure that you use the function definition provided for Java and Python solutions.  

4. Write a small markdown file explaining the high-level approach(es) you used to solve the above problem. 

 

WHAT TO SUBMIT:
1. Submit only the link to the Lab folder you created on Github. 

 

RUBRIC
+5 Points: Attempt has been made to solve the above problem in both Java and Python

+2 points: Code correctly handles announced test cases

+2 points: Code handles hidden test cases

+1 points: Explanation is present in the same folder
